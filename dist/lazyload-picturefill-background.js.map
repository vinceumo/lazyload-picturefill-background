{"version":3,"sources":["lazyload-picturefill-background.js"],"names":["lazyloadPicturefillBackground","options","updateDefaultSettings","init","pictureFillBackgroundSelector","length","Array","prototype","forEach","call","el","matches","mqMatches","sources","querySelectorAll","pictureFillBackgroundSourceSelector","getSources","match","mq","window","matchMedia","media","push","src","addListener","RegExp","escapeRegExp","test","style","backgroundImage","classList","contains","lazySelector","substring","createObserver","pop","sourcesEls","source","sourceObj","getAttribute","IntersectionObserver","entries","entry","isIntersecting","lazyImage","target","remove","lazyBackgroundImageObserver","unobserve","observe","string","replace","userSettings","defaultSettings","attrname","document"],"mappings":"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","file":"lazyload-picturefill-background.js","sourceRoot":"..\\src","sourcesContent":["export default class lazyloadPicturefillBackground {\r\n  constructor(options) {\r\n    this.options = lazyloadPicturefillBackground.updateDefaultSettings(options);\r\n    this.init();\r\n  }\r\n\r\n  static updateDefaultSettings(userSettings) {\r\n    const defaultSettings = {\r\n      pictureFillBackgroundSelector: \".picturefill-background\",\r\n      lazySelector: \"is-lazy\",\r\n      pictureFillBackgroundSourceSelector: \".picturefill-background-source\"\r\n    };\r\n\r\n    for (const attrname in userSettings) {\r\n      defaultSettings[attrname] = userSettings[attrname];\r\n    }\r\n\r\n    defaultSettings.pictureFillBackgroundSelector =\r\n      typeof defaultSettings.pictureFillBackgroundSelector === \"string\"\r\n        ? document.querySelectorAll(\r\n            defaultSettings.pictureFillBackgroundSelector\r\n          )\r\n        : defaultSettings.pictureFillBackgroundSelector;\r\n\r\n    return defaultSettings;\r\n  }\r\n\r\n  init() {\r\n    if (this.options.pictureFillBackgroundSelector.length) {\r\n      Array.prototype.forEach.call(\r\n        this.options.pictureFillBackgroundSelector,\r\n        el => {\r\n          let matches = [];\r\n          let mqMatches = [];\r\n          const sources = el.querySelectorAll(\r\n            this.options.pictureFillBackgroundSourceSelector\r\n          );\r\n\r\n          matches = this.getSources(sources);\r\n\r\n          for (let match of matches) {\r\n            const mq = window.matchMedia(match.media);\r\n\r\n            if (window.matchMedia && mq.matches) {\r\n              mqMatches.push(match.src);\r\n            }\r\n\r\n            mq.addListener(() => {\r\n              if (mq.matches) {\r\n                const exp = new RegExp(this.escapeRegExp(match.src));\r\n                if (!exp.test(el.style.backgroundImage)) {\r\n                  el.style.backgroundImage = \"url('\" + match.src + \"')\";\r\n                }\r\n              }\r\n            });\r\n          }\r\n\r\n          if (el.classList.contains(this.options.lazySelector.substring(1))) {\r\n            createObserver(el, mqMatches);\r\n          } else {\r\n            let src = mqMatches.length ? mqMatches.pop() : matches[0];\r\n            el.style.backgroundImage = \"url('\" + src + \"')\";\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  getSources(sourcesEls) {\r\n    let matches = [];\r\n\r\n    Array.prototype.forEach.call(sourcesEls, source => {\r\n      const sourceObj = {\r\n        src: source.getAttribute(\"data-src\"),\r\n        media: source.getAttribute(\"data-media\")\r\n      };\r\n\r\n      matches.push(sourceObj);\r\n    });\r\n\r\n    return matches;\r\n  }\r\n\r\n  createObserver(pictureFillBackgroundSelector, mqMatches) {\r\n    const observer = new IntersectionObserver(entries => {\r\n      entries.forEach(function(entry) {\r\n        if (entry.isIntersecting) {\r\n          const lazyImage = entry.target;\r\n          lazyImage.classList.remove(this.options.lazySelector.substring(1));\r\n          this.lazyBackgroundImageObserver.unobserve(lazyImage);\r\n\r\n          let src = mqMatches.length ? mqMatches.pop() : matches[0];\r\n          lazyImage.style.backgroundImage = \"url('\" + src + \"')\";\r\n        }\r\n      });\r\n    });\r\n    observer.observe(pictureFillBackgroundSelector);\r\n  }\r\n\r\n  escapeRegExp(string) {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n  }\r\n}\r\n"]}